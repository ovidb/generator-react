const yeoman = require('yeoman-generator');
const _ = require('lodash');
const yosay = require('yosay');
const fs = require('fs');
const path = require('path');

module.exports = yeoman.Base.extend({
  prompting: function() {
    return this.prompt([
      {
        type: 'input',
        name: 'name',
        message: 'Your component name',
        default: 'ReactComponent'
      },
      {
        type: 'input',
        name: 'category',
        message: 'Your component category',
        default: 'Components'
      }
    ]).then(function(answers) {
      this.props = answers;
      this.props.nameUp = this.capitalizeFirstLetter(this.toCamelCase(this.props.name));
    }.bind(this));
  },
  writing: function() {
    this.copyFiles('name.jsx', this.prefix(this.props.name+'.jsx'));
    this.copyFiles('name.story.js', this.prefix(this.props.name+'.story.js'));
    this.copyFiles('name.test.js', this.prefix(this.props.name+'.test.js'));
    this.copyFiles('name.module.scss', this.prefix(this.props.name+'.scss'));
    this.copyFiles('mock-data.json', this.prefix('mock-data.js'));
  },
  end: function() {
    const outputMsg = `\n\nYour react component ${this.props.name} has been created.`;
    this.log(yosay(outputMsg));
  },
  prefix: function(file) {
    return this.props.name + '/' + file;
  },
  copyFiles: function(from, to) {
    this.props.nameUp = this.capitalizeFirstLetter(this.toCamelCase(this.props.name));
    this.fs.copyTpl(this.templatePath(from), this.destinationPath(to), this.props);
  },
  toCamelCase: function(str) {
    return str
      .replace(/\s(.)/g, function($1) { return $1.toUpperCase(); })
      .replace(/\s/g, '')
      .replace(/^(.)/, function($1) { return $1.toLowerCase(); });
  },
  capitalizeFirstLetter: function(string) {
    return string.charAt(0).toUpperCase() + string.slice(1);
  }
});